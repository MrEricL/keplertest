// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import React, {Component} from 'react';
import {connect} from 'react-redux';
import AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer';
import KeplerGl from 'kepler.gl';
import axios from 'axios';

// Kepler.gl actions
import {addDataToMap} from 'kepler.gl/actions';
// Kepler.gl Data processing APIs
import Processors from 'kepler.gl/processors';

// Kepler.gl Schema APIs
import KeplerGlSchema from 'kepler.gl/schemas';

// Component and helpers
import Button from './button';
import downloadJsonFile from "./file-download";

// Sample data
import nycTrips from './data/nyc-trips.csv';
import test2 from './data/test2.csv';



const MAPBOX_TOKEN = process.env.MapboxAccessToken; // eslint-disable-line


function convertArrayOfObjectsToCSV(items) {  
  const replacer = (key, value) => value === null ? '' : value // specify how you want to handle null values here
  const header = Object.keys(items[0])
  let csv = items.map(row => header.map(fieldName => JSON.stringify(row[fieldName], replacer)).join(','))
  csv.unshift(header.join(','))
  //csv = csv.join('\r\n')
  return csv
}




class App extends Component {

  componentDidMount() {
    let abc = [{"CensusTracts":40047000100,"geography":"{ \"type\": \"Polygon\", \"coordinates\": [ [ [-97.901459, 36.397894], [-97.901253, 36.397864], [-97.901197, 36.397837], [-97.900979, 36.397756], [-97.900884, 36.39774], [-97.90074, 36.397746], [-97.900218, 36.397807], [-97.899739, 36.397811], [-97.898997, 36.397806], [-97.898999, 36.397596], [-97.899004, 36.397309], [-97.899005, 36.396968], [-97.899006, 36.396759], [-97.899006, 36.39653], [-97.899008, 36.396161], [-97.899008, 36.395843], [-97.899009, 36.395614], [-97.89901, 36.395392], [-97.899012, 36.395056], [-97.899013, 36.394729], [-97.899014, 36.394508], [-97.899015, 36.394288], [-97.899017, 36.393963], [-97.899018, 36.39363], [-97.89902, 36.393411], [-97.898714, 36.39341], [-97.897796, 36.393408], [-97.897491, 36.393408], [-97.897246, 36.393407], [-97.896513, 36.393406], [-97.896269, 36.393406], [-97.896023, 36.393405], [-97.895286, 36.393404], [-97.895041, 36.393404], [-97.894798, 36.393403], [-97.894069, 36.3934], [-97.893827, 36.3934], [-97.893581, 36.393398], [-97.892843, 36.393396], [-97.892597, 36.393395], [-97.892352, 36.393394], [-97.891619, 36.393392], [-97.891375, 36.393392], [-97.891125, 36.393392], [-97.890621, 36.393392], [-97.890375, 36.393391], [-97.890126, 36.393391], [-97.890127, 36.393171], [-97.89013, 36.392871], [-97.89013, 36.39283], [-97.890132, 36.392511], [-97.890134, 36.392292], [-97.890136, 36.391837], [-97.890137, 36.39089], [-97.890076, 36.39089], [-97.889903, 36.39089], [-97.889204, 36.390891], [-97.888972, 36.390892], [-97.888722, 36.390892], [-97.888358, 36.390893], [-97.887972, 36.390894], [-97.887723, 36.390895], [-97.887474, 36.390894], [-97.887123, 36.390894], [-97.88673, 36.39089], [-97.886483, 36.390888], [-97.886234, 36.390886], [-97.886014, 36.390885], [-97.885888, 36.390884], [-97.885489, 36.39088], [-97.885241, 36.390878], [-97.884991, 36.390875], [-97.884635, 36.39087], [-97.884242, 36.390866], [-97.883993, 36.390863], [-97.883747, 36.390859], [-97.883012, 36.390847], [-97.882767, 36.390844], [-97.882623, 36.390842], [-97.88226, 36.390845], [-97.881522, 36.390852], [-97.8812, 36.390854], [-97.880961, 36.390857], [-97.880235, 36.390862], [-97.879914, 36.390865], [-97.87959, 36.390865], [-97.878621, 36.390865], [-97.878298, 36.390866], [-97.877584, 36.390869], [-97.877382, 36.390863], [-97.877159, 36.390862], [-97.876938, 36.390862], [-97.876821, 36.391608], [-97.876767, 36.391984], [-97.876527, 36.392696], [-97.876377, 36.393109], [-97.87629, 36.393347], [-97.876031, 36.394062], [-97.875945, 36.394301], [-97.875862, 36.394528], [-97.875801, 36.394696], [-97.875633, 36.395218], [-97.87556, 36.395449], [-97.875473, 36.395683], [-97.875213, 36.396386], [-97.875209, 36.396399], [-97.875133, 36.396623], [-97.875052, 36.39686], [-97.875, 36.397015], [-97.874821, 36.397574], [-97.874781, 36.397702], [-97.87474, 36.397811], [-97.874653, 36.398044], [-97.874394, 36.398745], [-97.874308, 36.398979], [-97.87423, 36.399191], [-97.874223, 36.399209], [-97.873986, 36.399908], [-97.873908, 36.400141], [-97.873811, 36.400425], [-97.873741, 36.400607], [-97.873336, 36.401682], [-97.873222, 36.402001], [-97.873063, 36.402447], [-97.873056, 36.402468], [-97.872975, 36.402693], [-97.872883, 36.402955], [-97.872737, 36.403371], [-97.872659, 36.403597], [-97.872548, 36.403913], [-97.872215, 36.404864], [-97.872105, 36.405181], [-97.871923, 36.4057], [-97.871857, 36.405892], [-97.871329, 36.407241], [-97.87128, 36.407368], [-97.871141, 36.407759], [-97.871079, 36.407987], [-97.870997, 36.408291], [-97.870868, 36.408664], [-97.870792, 36.408888], [-97.870668, 36.409252], [-97.870386, 36.410011], [-97.87039, 36.410035], [-97.869977, 36.411149], [-97.869193, 36.413392], [-97.86916, 36.413489], [-97.868797, 36.41452], [-97.868411, 36.415615], [-97.867813, 36.417315], [-97.867774, 36.417443], [-97.867607, 36.417989], [-97.867325, 36.418844], [-97.867299, 36.418913], [-97.866909, 36.420009], [-97.866989, 36.419991], [-97.867205, 36.419945], [-97.869741, 36.419968], [-97.869937, 36.419966], [-97.870348, 36.419967], [-97.871291, 36.419971], [-97.871519, 36.41997], [-97.872172, 36.419968], [-97.872781, 36.419967], [-97.872857, 36.419967], [-97.873715, 36.419967], [-97.874994, 36.419968], [-97.876937, 36.419946], [-97.878188, 36.419936], [-97.878398, 36.419935], [-97.879497, 36.419929], [-97.88009, 36.41993], [-97.880426, 36.41993], [-97.880621, 36.419931], [-97.881256, 36.419932], [-97.881434, 36.419928], [-97.881771, 36.419923], [-97.881978, 36.419919], [-97.882278, 36.419914], [-97.882602, 36.419909], [-97.882811, 36.419906], [-97.88302, 36.419904], [-97.88365, 36.419899], [-97.88386, 36.419898], [-97.884029, 36.419896], [-97.884537, 36.419892], [-97.884707, 36.419892], [-97.884751, 36.419891], [-97.884883, 36.419891], [-97.884928, 36.419891], [-97.88524, 36.419889], [-97.885457, 36.419889], [-97.886133, 36.419887], [-97.886178, 36.419886], [-97.886491, 36.419886], [-97.886596, 36.419885], [-97.886914, 36.419884], [-97.88702, 36.419884], [-97.887226, 36.419883], [-97.887445, 36.419882], [-97.887846, 36.419877], [-97.888053, 36.419875], [-97.888169, 36.419873], [-97.888517, 36.419869], [-97.888634, 36.419868], [-97.888727, 36.419866], [-97.889006, 36.419862], [-97.8891, 36.419862], [-97.889198, 36.419859], [-97.889493, 36.41985], [-97.889592, 36.419848], [-97.889738, 36.419849], [-97.890176, 36.419852], [-97.890323, 36.419853], [-97.890322, 36.419733], [-97.89032, 36.419376], [-97.89032, 36.419257], [-97.890313, 36.418559], [-97.890312, 36.418384], [-97.890312, 36.416557], [-97.890312, 36.416467], [-97.890312, 36.41577], [-97.890305, 36.415085], [-97.890304, 36.415032], [-97.890292, 36.41395], [-97.890284, 36.413328], [-97.890284, 36.412818], [-97.890286, 36.412081], [-97.890286, 36.411683], [-97.890289, 36.410774], [-97.890287, 36.410492], [-97.890286, 36.410095], [-97.890284, 36.409865], [-97.890281, 36.409175], [-97.89028, 36.408945], [-97.890279, 36.408905], [-97.890276, 36.408788], [-97.890276, 36.408749], [-97.890271, 36.408573], [-97.890264, 36.40831], [-97.890251, 36.408045], [-97.890243, 36.40787], [-97.890241, 36.407825], [-97.89024, 36.407799], [-97.890229, 36.407691], [-97.890225, 36.407647], [-97.890187, 36.407271], [-97.89017, 36.407089], [-97.890134, 36.406141], [-97.890121, 36.405764], [-97.890195, 36.405717], [-97.890238, 36.40569], [-97.890409, 36.405582], [-97.8905, 36.405548], [-97.890819, 36.405427], [-97.890953, 36.405393], [-97.89104, 36.405381], [-97.891208, 36.405383], [-97.891293, 36.405425], [-97.891385, 36.4054], [-97.891606, 36.405382], [-97.892245, 36.405373], [-97.892614, 36.405369], [-97.893166, 36.405363], [-97.894353, 36.405358], [-97.894818, 36.405349], [-97.895117, 36.405343], [-97.895983, 36.405329], [-97.896074, 36.405328], [-97.89634, 36.405324], [-97.896592, 36.405321], [-97.897138, 36.405315], [-97.897405, 36.405313], [-97.897608, 36.405311], [-97.897876, 36.405309], [-97.89822, 36.405306], [-97.898425, 36.405305], [-97.898685, 36.405303], [-97.89897, 36.405302], [-97.899465, 36.405294], [-97.899725, 36.405291], [-97.899978, 36.405287], [-97.900513, 36.405281], [-97.900737, 36.405278], [-97.900991, 36.405275], [-97.900989, 36.404802], [-97.900987, 36.404004], [-97.900994, 36.403383], [-97.901, 36.402911], [-97.901002, 36.402713], [-97.901004, 36.402593], [-97.900999, 36.402119], [-97.900998, 36.401922], [-97.900997, 36.401723], [-97.900994, 36.401128], [-97.900994, 36.40093], [-97.900994, 36.400734], [-97.900995, 36.400148], [-97.900996, 36.399953], [-97.900994, 36.399361], [-97.900998, 36.398956], [-97.900999, 36.398576], [-97.901013, 36.398488], [-97.901021, 36.39844], [-97.901077, 36.398362], [-97.901265, 36.398213], [-97.901341, 36.398135], [-97.901409, 36.39805], [-97.901459, 36.397894] ] ] } "},{"CensusTracts":40137000600,"geography":"{ \"type\": \"Polygon\", \"coordinates\": [ [ [-97.96929, 34.494329], [-97.969178, 34.493382], [-97.969136, 34.493031], [-97.969049, 34.4926], [-97.968898, 34.491839], [-97.96885, 34.491571], [-97.968785, 34.491215], [-97.968752, 34.491035], [-97.968668, 34.49057], [-97.968589, 34.490255], [-97.968564, 34.490156], [-97.968493, 34.489744], [-97.96848, 34.489671], [-97.96847, 34.489613], [-97.968183, 34.487984], [-97.967973, 34.486881], [-97.967828, 34.486098], [-97.967622, 34.485409], [-97.967601, 34.485323], [-97.967552, 34.485127], [-97.967441, 34.48478], [-97.966862, 34.48374], [-97.966761, 34.483557], [-97.966238, 34.482591], [-97.965896, 34.481918], [-97.965814, 34.481755], [-97.965584, 34.481325], [-97.965481, 34.481033], [-97.965628, 34.480981], [-97.965721, 34.480906], [-97.965758, 34.480852], [-97.965768, 34.480669], [-97.965754, 34.480534], [-97.965569, 34.479735], [-97.965538, 34.479607], [-97.9655, 34.479297], [-97.965468, 34.478745], [-97.965481, 34.478077], [-97.965001, 34.478068], [-97.965071, 34.477653], [-97.96509, 34.477592], [-97.965041, 34.477487], [-97.964938, 34.477272], [-97.964867, 34.477069], [-97.964959, 34.476613], [-97.96497, 34.476319], [-97.964968, 34.475834], [-97.964968, 34.47527], [-97.964968, 34.475133], [-97.964969, 34.474846], [-97.964969, 34.474567], [-97.964972, 34.473997], [-97.964982, 34.471622], [-97.964983, 34.471275], [-97.964985, 34.470623], [-97.964988, 34.469443], [-97.965004, 34.467887], [-97.965005, 34.467444], [-97.965007, 34.466732], [-97.965008, 34.466404], [-97.965008, 34.46625], [-97.965006, 34.465309], [-97.965002, 34.463516], [-97.965001, 34.463208], [-97.965011, 34.462634], [-97.965025, 34.461779], [-97.965029, 34.461521], [-97.965027, 34.460559], [-97.964566, 34.460552], [-97.96376, 34.460539], [-97.963356, 34.460533], [-97.963214, 34.460544], [-97.96308, 34.460581], [-97.963039, 34.46062], [-97.962989, 34.460667], [-97.962948, 34.460739], [-97.962929, 34.460813], [-97.96293, 34.460913], [-97.961764, 34.460894], [-97.957744, 34.460846], [-97.956182, 34.460822], [-97.956039, 34.462669], [-97.956063, 34.46356], [-97.955668, 34.463559], [-97.955554, 34.463559], [-97.953104, 34.463554], [-97.951797, 34.463552], [-97.949444, 34.463542], [-97.947385, 34.463546], [-97.947236, 34.463546], [-97.944681, 34.463547], [-97.942533, 34.463553], [-97.941226, 34.463557], [-97.940464, 34.463556], [-97.939309, 34.463555], [-97.938652, 34.463554], [-97.938144, 34.463553], [-97.937936, 34.463552], [-97.934587, 34.463528], [-97.934334, 34.463527], [-97.932976, 34.46352], [-97.931686, 34.463531], [-97.930646, 34.463541], [-97.930121, 34.463541], [-97.92995, 34.463541], [-97.929569, 34.463541], [-97.928944, 34.463542], [-97.92802, 34.463543], [-97.920935, 34.463528], [-97.918808, 34.463529], [-97.916106, 34.463541], [-97.915935, 34.463542], [-97.915225, 34.463543], [-97.913861, 34.463545], [-97.912314, 34.463539], [-97.912301, 34.475138], [-97.912317, 34.475223], [-97.912376, 34.475376], [-97.912501, 34.475522], [-97.912561, 34.475635], [-97.91256, 34.475701], [-97.912528, 34.475794], [-97.912449, 34.475856], [-97.912219, 34.476037], [-97.914698, 34.478175], [-97.916647, 34.479851], [-97.918345, 34.481341], [-97.918764, 34.481709], [-97.919351, 34.482218], [-97.92056, 34.483266], [-97.921203, 34.483803], [-97.921332, 34.48391], [-97.921482, 34.484035], [-97.923096, 34.485433], [-97.923314, 34.485621], [-97.92342, 34.485713], [-97.924927, 34.487018], [-97.925016, 34.487095], [-97.926799, 34.488629], [-97.927704, 34.489375], [-97.928214, 34.489796], [-97.928269, 34.489841], [-97.928558, 34.490041], [-97.928908, 34.490267], [-97.928991, 34.490317], [-97.929322, 34.490518], [-97.929922, 34.490833], [-97.92993, 34.491357], [-97.929929, 34.491402], [-97.929917, 34.491994], [-97.929903, 34.492638], [-97.931238, 34.492638], [-97.931861, 34.492903], [-97.931932, 34.492933], [-97.932291, 34.493168], [-97.932543, 34.49339], [-97.93294, 34.49374], [-97.933486, 34.494234], [-97.933996, 34.494697], [-97.934216, 34.494896], [-97.934337, 34.494997], [-97.934585, 34.495205], [-97.935994, 34.496385], [-97.936315, 34.496673], [-97.937506, 34.497709], [-97.938292, 34.498365], [-97.939038, 34.499038], [-97.939499, 34.499452], [-97.939989, 34.499876], [-97.94013, 34.499998], [-97.940476, 34.500286], [-97.940813, 34.500492], [-97.940868, 34.500516], [-97.941098, 34.500614], [-97.941402, 34.500695], [-97.941889, 34.500775], [-97.942121, 34.500771], [-97.942864, 34.50076], [-97.943201, 34.500761], [-97.944262, 34.500767], [-97.945329, 34.500822], [-97.946568, 34.500886], [-97.947279, 34.500943], [-97.948595, 34.501049], [-97.949329, 34.501116], [-97.950376, 34.501213], [-97.951048, 34.501282], [-97.951322, 34.501311], [-97.951419, 34.501321], [-97.95234, 34.501417], [-97.952519, 34.501432], [-97.953447, 34.501511], [-97.954018, 34.501562], [-97.954162, 34.501577], [-97.954861, 34.501649], [-97.9549, 34.501393], [-97.954831, 34.50002], [-97.954907, 34.499486], [-97.955093, 34.499469], [-97.955676, 34.4995], [-97.956555, 34.499547], [-97.957047, 34.49959], [-97.958554, 34.499724], [-97.958962, 34.499761], [-97.960076, 34.499882], [-97.960637, 34.499943], [-97.961504, 34.499997], [-97.961606, 34.500009], [-97.962385, 34.500073], [-97.962924, 34.500127], [-97.962772, 34.501227], [-97.964082, 34.501333], [-97.964913, 34.501389], [-97.965608, 34.501492], [-97.966034, 34.501562], [-97.967127, 34.501623], [-97.968414, 34.501728], [-97.968555, 34.500626], [-97.968647, 34.499922], [-97.968703, 34.499425], [-97.968797, 34.498598], [-97.968969, 34.497371], [-97.969036, 34.496935], [-97.969219, 34.495585], [-97.969265, 34.495048], [-97.969292, 34.494436], [-97.96929, 34.494329] ] ] } "},{"CensusTracts":40143001200,"geography":"{ \"type\": \"Polygon\", \"coordinates\": [ [ [-95.98475, 36.163293], [-95.984737, 36.162896], [-95.984691, 36.162644], [-95.984567, 36.162323], [-95.984497, 36.162156], [-95.984436, 36.161958], [-95.983937, 36.160573], [-95.983799, 36.16054], [-95.982795, 36.160302], [-95.98256, 36.160237], [-95.981799, 36.160027], [-95.981539, 36.159955], [-95.981331, 36.159897], [-95.981166, 36.159852], [-95.981048, 36.159819], [-95.98061, 36.15973], [-95.98044, 36.159688], [-95.980212, 36.159646], [-95.980005, 36.159608], [-95.979891, 36.15958], [-95.979258, 36.159485], [-95.978863, 36.159469], [-95.978491, 36.15945], [-95.977017, 36.159448], [-95.976901, 36.159442], [-95.975627, 36.15938], [-95.973186, 36.159318], [-95.970325, 36.159246], [-95.967101, 36.159239], [-95.967098, 36.159679], [-95.967123, 36.160564], [-95.96712, 36.162546], [-95.967126, 36.163505], [-95.9671, 36.163808], [-95.967113, 36.164489], [-95.967128, 36.164883], [-95.967128, 36.165032], [-95.967128, 36.165105], [-95.967132, 36.16567], [-95.967108, 36.166871], [-95.967151, 36.167851], [-95.96712, 36.168789], [-95.967151, 36.169753], [-95.967142, 36.169879], [-95.967148, 36.170374], [-95.967133, 36.171181], [-95.967124, 36.172029], [-95.967144, 36.172968], [-95.967144, 36.173417], [-95.967158, 36.17431], [-95.967185, 36.175219], [-95.967168, 36.176092], [-95.967149, 36.177045], [-95.967121, 36.178867], [-95.967114, 36.179876], [-95.967061, 36.180294], [-95.967052, 36.180391], [-95.965614, 36.181416], [-95.965963, 36.181815], [-95.96607, 36.181976], [-95.966959, 36.181296], [-95.967649, 36.180844], [-95.968493, 36.180232], [-95.969311, 36.179661], [-95.969907, 36.179287], [-95.970291, 36.179047], [-95.973244, 36.177017], [-95.972953, 36.177447], [-95.972989, 36.177745], [-95.973176, 36.177955], [-95.973479, 36.178041], [-95.973778, 36.178021], [-95.974082, 36.177829], [-95.974175, 36.177614], [-95.974162, 36.177401], [-95.97406, 36.177238], [-95.973883, 36.177104], [-95.973494, 36.176981], [-95.974565, 36.176959], [-95.974845, 36.17695], [-95.975556, 36.176926], [-95.976702, 36.176874], [-95.97777, 36.176886], [-95.978627, 36.176882], [-95.979987, 36.176948], [-95.980659, 36.176943], [-95.981498, 36.17695], [-95.983065, 36.176961], [-95.983257, 36.17696], [-95.983305, 36.175947], [-95.983458, 36.174851], [-95.983848, 36.171979], [-95.983956, 36.171244], [-95.984198, 36.169268], [-95.984259, 36.168737], [-95.98434, 36.168262], [-95.984289, 36.167163], [-95.984465, 36.166375], [-95.984573, 36.165349], [-95.984745, 36.164], [-95.984763, 36.163635], [-95.98475, 36.163293] ] ] } "}];
    abc = JSON.stringify(abc)
    console.log(abc)
    console.log(test2)

    // Use processCsvData helper to convert csv file into kepler.gl structure {fields, rows}

    /*
    const d = axios.get("http://localhost:3000/")
          .then(response => {
              console.log("hi1")
              //Processors.processCsvData(convertArrayOfObjectsToCSV(response.data))
              return response.data
            })
          .then(res=>{
              console.log(res)
              return convertArrayOfObjectsToCSV(res)
          })
          .then(res=>{
            console.log("hi2")
            console.log(res)
            const data = Processors.processCsvData(nycTrips)
            const dataset = {
              data,
              info: {
                id: 'my_data'
                }
            }
            return dataset
          })
          .then(res=>{
            console.log(res)
            this.props.dispatch(addDataToMap({datasets: {res}, info: {id: "my_data"} }));
          })
          .catch(err =>  {
             err
          });
  
    */
    const data = Processors.processCsvData(abc);
    // Create dataset structure
    const dataset = {
      data,
      info: {
        id: 'my_data'
        }
    };

    this.props.dispatch(addDataToMap({datasets: dataset}));



  }





  render() {
    return (
      <div style={{position: 'absolute', width: '100%', height: '100%'}}>
        <AutoSizer>
          {({height, width}) => (
            <KeplerGl
              mapboxApiAccessToken={MAPBOX_TOKEN}
              id="map"
              width={width}
              height={height}
            />
          )}
        </AutoSizer>
      </div>
    );
  }
}

const mapStateToProps = state => state;
const dispatchToProps = dispatch => ({dispatch});

export default connect(mapStateToProps, dispatchToProps)(App);